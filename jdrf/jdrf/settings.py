"""
Django settings for jdrf project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import logging

# set the location user will upload files to
UPLOAD_FOLDER = "/opt/upload_folder/"
PROCESS_FOLDER = "/opt/process_folder/"
ARCHIVE_FOLDER = "/opt/archive_folder/"
TEMP_FOLDER = "/opt/temp/"
SSH_KEY = "/opt/SSH/jdrf_transfer_key"
REMOTE_TRANSFER_SERVER = "jdrf2.rc.fas.harvard.edu"
REMOTE_TRANSFER_FOLDER = "/data/processed_data/"
REMOTE_TRANSFER_USER = "smaharjan"

FILE_FOLDER_MAP = {
    'upload': UPLOAD_FOLDER,
    'process': PROCESS_FOLDER,
    'archive': ARCHIVE_FOLDER,
    'viz': PROCESS_FOLDER,
    'data_products': PROCESS_FOLDER
}

INDEX_BASE_DIR = "/opt/whoosh_ontology_indices/"

# set the default metadata file names
METADATA_FILE_NAME = "metadata.tsv"
METADATA_GROUP_FILE_NAME = "metadata_study.tsv"
METADATA_VALIDATION_FILE_NAME = "sample_metadata.errors.xlsx"
METADATA_VALIDATION_FILE_NAME_CSV = "metadata.error.csv"
METADATA_EDIT_FILE_NAME = "metadata.update.csv"

# Some base settings for our data release policy
RELEASE_INTERNAL_MONTHS = 6
RELEASE_PUBLIC_MONTHS = 18

# function to get environment variables
def get_env(key):
    try:
        return os.environ[key]
    except KeyError:
        print("Please set the environment variable: "+key)

# set up the logger
# set up logging config
logging.basicConfig(filename='jdrf1.log',level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s: %(message)s',
    datefmt='%m/%d/%Y %I:%M:%S %p')
logger=logging.getLogger('jdrf1')
logger.info("Setting are being applied")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env('JDRF_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ADD the host for this app here
ALLOWED_HOSTS = ['0.0.0.0', 'localhost']

# Set login redirect page
LOGIN_REDIRECT_URL = "upload_metadata"

# Add ldap settings with search/bind
# If ldap authentication fails for user, then
# fall back on django model for authentication
AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Replace the LDAP default info with RC info in prod
import ldap
from django_auth_ldap.config import LDAPSearch

AUTH_LDAP_SERVER_URI = "ldap://DOMAIN:389"
# Use bind and search with specific account for the bind
AUTH_LDAP_BIND_DN = "BINDDN"
AUTH_LDAP_BIND_PASSWORD = "BINDPW"

AUTH_LDAP_USER_SEARCH = LDAPSearch("DOMAIN",
    ldap.SCOPE_SUBTREE, "(uid=%(user)s)")

# Without these settings the connection will time out
AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_DEBUG_LEVEL: 1,
    ldap.OPT_REFERRALS: 0,
}

# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

# Set up logger for ldap
ldap_logger = logging.getLogger('django_auth_ldap')
ldap_logger.addHandler(logging.StreamHandler())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pages',
    'widget_tweaks'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'jdrf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jdrf.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# ADD mysql database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jdrf',
        'USER': 'jdrf_user',
        'PASSWORD': get_env('JDRF_PASSWORD'),
        'HOST': '127.0.0.1',
        'PORT': '',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
# ADD path to static root
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# django-filer settings
FILER_IS_PUBLIC_DEFAULT = True
